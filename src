#include <ESP8266WiFi.h>
#include <DHT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <FirebaseESP8266.h>
#include <time.h>

// Konfigurasi Wifi
const char* ssid = "wifi name";
const char* password = "password";
#define API_KEY " "
#define DATABASE_URL " "
#define USER_EMAIL " "
#define USER_PASSWORD " "

// Firebase dan DHT
FirebaseData firebaseData;
FirebaseAuth auth;
FirebaseConfig config;
#define DHTPIN D7
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Konfigurasi Relay
const int relayPins[] = {0, 2, 15};
bool relayStates[] = {false, false, false}; // {dinamo, heater, kipas}
float hum, temp;
int sisaMenit, sisaDetik;
char timestamp[30];
bool autoControl = true;

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi connected");

  dht.begin();
  Wire.begin(D2, D1);
  lcd.begin();
  lcd.backlight();

  for (int i = 0; i < 3; i++) {
    pinMode(relayPins[i], OUTPUT);
  }

  config.api_key = API_KEY;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  config.database_url = DATABASE_URL;
  Firebase.begin(&config, &auth);

  configTime(8 * 3600, 0, "asia.pool.ntp.org", "time.nist.gov");
  while (!time(nullptr)) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("NTP time synchronized");
}

void fetchData() {
  if (Firebase.getString(firebaseData, "/Data/waktu")) sisaMenit = firebaseData.stringData().toInt();
  if (Firebase.getString(firebaseData, "/Data/detik")) sisaDetik = firebaseData.stringData().toInt();
  if (Firebase.getBool(firebaseData, "/Data/Mesin")) relayStates[0] = firebaseData.boolData();
  if (Firebase.getBool(firebaseData, "/Data/Heater")) relayStates[1] = firebaseData.boolData();
  if (Firebase.getBool(firebaseData, "/Data/Kipas")) relayStates[2] = firebaseData.boolData();
  if (Firebase.getBool(firebaseData, "/Data/auto")) autoControl = firebaseData.boolData();
  
  Serial.println("Data berhasil diambil dari Firebase:");
  Serial.print("Sisa Menit: "); Serial.println(sisaMenit);
  Serial.print("Sisa Detik: "); Serial.println(sisaDetik);
  Serial.print("Mesin (Relay 1): "); Serial.println(relayStates[0] ? "ON" : "OFF");
  Serial.print("Heater (Relay 2): "); Serial.println(relayStates[1] ? "ON" : "OFF");
  Serial.print("Kipas (Relay 3): "); Serial.println(relayStates[2] ? "ON" : "OFF");
  Serial.print("Auto Control: "); Serial.println(autoControl ? "ON" : "OFF");
}

void updateFirebaseData(const String &path, bool value) {
  if (Firebase.setBool(firebaseData, path, value)) {
    Serial.print("Status "); Serial.print(path); Serial.println(" berhasil dikirim ke Firebase");
  } else {
    Serial.print("Gagal mengirim status "); Serial.print(path); Serial.println(" ke Firebase");
    Serial.println(firebaseData.errorReason());
  }
}

void sendDataToFirebase() {
  hum = dht.readHumidity();
  temp = dht.readTemperature();

// Print the results to the Serial Monitor
  Serial.print("Humidity: ");
  Serial.print(hum);
  Serial.print(" %\t");
  Serial.print("Temperature: ");
  Serial.print(temp);
  Serial.println(" *C");

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.printf("Temp: %.2f C", temp);
  lcd.setCursor(0, 1);
  lcd.printf("Humid: %.2f %%", hum);
  delay(2500);

  if (Firebase.setFloat(firebaseData, "/Data/suhu", temp)) {
    Serial.println("Suhu berhasil dikirim ke Firebase");
  } else {
    Serial.println("Gagal mengirim suhu ke Firebase");
    Serial.println(firebaseData.errorReason());
  }

  if (Firebase.setFloat(firebaseData, "/Data/kelembapan", hum)) {
    Serial.println("Kelembapan berhasil dikirim ke Firebase");
  } else {
    Serial.println("Gagal mengirim kelembapan ke Firebase");
    Serial.println(firebaseData.errorReason());
  }

  time_t now = time(nullptr);
  struct tm *p_tm = localtime(&now);
  strftime(timestamp, sizeof(timestamp), "%Y-%m-%d %H:%M:%S", p_tm);
  String historyPath = "/History/" + String(timestamp);

  if (Firebase.setFloat(firebaseData, historyPath + "/suhu", temp)) {
    Serial.println("Suhu history berhasil dikirim ke Firebase");
  } else {
    Serial.println("Gagal mengirim suhu history ke Firebase");
    Serial.println(firebaseData.errorReason());
  }

  if (Firebase.setFloat(firebaseData, historyPath + "/kelembapan", hum)) {
    Serial.println("Kelembapan history berhasil dikirim ke Firebase");
  } else {
    Serial.println("Gagal mengirim kelembapan history ke Firebase");
    Serial.println(firebaseData.errorReason());
  }

  if (Firebase.setString(firebaseData, historyPath + "/Mesin", relayStates[0] ? "ON" : "OFF")) {
    Serial.println("Status Mesin history berhasil dikirim ke Firebase");
  } else {
    Serial.println("Gagal mengirim status Mesin history ke Firebase");
    Serial.println(firebaseData.errorReason());
  }

  if (Firebase.setString(firebaseData, historyPath + "/Heater", relayStates[1] ? "ON" : "OFF")) {
    Serial.println("Status Heater history berhasil dikirim ke Firebase");
  } else {
    Serial.println("Gagal mengirim status Heater history ke Firebase");
    Serial.println(firebaseData.errorReason());
  }

  if (Firebase.setString(firebaseData, historyPath + "/Kipas", relayStates[2] ? "ON" : "OFF")) {
    Serial.println("Status Kipas history berhasil dikirim ke Firebase");
  } else {
    Serial.println("Gagal mengirim status Kipas history ke Firebase");
    Serial.println(firebaseData.errorReason());
  }

  if (Firebase.setFloat(firebaseData, historyPath + "/sisaMenit", sisaMenit)) {
    Serial.println("Sisa menit history berhasil dikirim ke Firebase");
  } else {
    Serial.println("Gagal mengirim sisa menit history ke Firebase");
    Serial.println(firebaseData.errorReason());
  }

  if (Firebase.setFloat(firebaseData, historyPath + "/sisaDetik", sisaDetik)) {
    Serial.println("Sisa detik history berhasil dikirim ke Firebase");
  } else {
    Serial.println("Gagal mengirim sisa detik history ke Firebase");
    Serial.println(firebaseData.errorReason());
  }
}

void updateRelays() {
  for (int i = 0; i < 3; i++) {
    digitalWrite(relayPins[i], relayStates[i] ? LOW : HIGH);
    updateFirebaseData("/Data/relay" + String(i + 1), relayStates[i]);
    Serial.print("Relay "); Serial.print(i + 1); Serial.print(": "); Serial.println(relayStates[i] ? "ON" : "OFF");
  }
}

void manualControl() {
  Serial.println("Auto-kontrol OFF");
  updateRelays();
}

void autoControlMode() {
  Serial.println("Auto-kontrol ON");

  if (sisaMenit != 0 || sisaDetik != 0) {
    relayStates[0] = true; // Mesin
    if (temp < 40) {
      relayStates[1] = true;  // Heater
      relayStates[2] = false; // Kipas
    } else {
      relayStates[1] = false; // Heater
      relayStates[2] = true;  // Kipas
    }
  } else {
    relayStates[0] = relayStates[1] = relayStates[2] = false; // Semua OFF
  }

  updateRelays();
}

void loop() {
  fetchData();
  sendDataToFirebase();
  if (autoControl) autoControlMode();
  else manualControl();
  delay(2000);
}
